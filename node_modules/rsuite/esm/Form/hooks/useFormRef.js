'use client';
import { useRef, useImperativeHandle } from 'react';
import omit from 'lodash/omit';
import useEventCallback from '../../utils/useEventCallback';
import { nameToPath } from '../../FormControl/utils';
export default function useFormRef(ref, props) {
  var rootRef = useRef(null);
  var formError = props.formError,
    setFormError = props.setFormError,
    nestedField = props.nestedField,
    check = props.check,
    checkForField = props.checkForField,
    checkAsync = props.checkAsync,
    checkForFieldAsync = props.checkForFieldAsync;
  var cleanErrors = useEventCallback(function () {
    setFormError({});
  });
  var resetErrors = useEventCallback(function (formError) {
    if (formError === void 0) {
      formError = {};
    }
    setFormError(formError);
  });
  var cleanErrorForField = useEventCallback(function (fieldName) {
    setFormError(omit(formError, [nestedField ? nameToPath(fieldName) : fieldName]));
  });
  useImperativeHandle(ref, function () {
    return {
      root: rootRef.current,
      check: check,
      checkForField: checkForField,
      checkAsync: checkAsync,
      checkForFieldAsync: checkForFieldAsync,
      cleanErrors: cleanErrors,
      cleanErrorForField: cleanErrorForField,
      resetErrors: resetErrors
    };
  });
  return rootRef;
}