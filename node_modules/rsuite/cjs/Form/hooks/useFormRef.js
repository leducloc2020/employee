'use client';
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = useFormRef;
var _react = require("react");
var _omit = _interopRequireDefault(require("lodash/omit"));
var _useEventCallback = _interopRequireDefault(require("../../utils/useEventCallback"));
var _utils = require("../../FormControl/utils");
function useFormRef(ref, props) {
  var rootRef = (0, _react.useRef)(null);
  var formError = props.formError,
    setFormError = props.setFormError,
    nestedField = props.nestedField,
    check = props.check,
    checkForField = props.checkForField,
    checkAsync = props.checkAsync,
    checkForFieldAsync = props.checkForFieldAsync;
  var cleanErrors = (0, _useEventCallback.default)(function () {
    setFormError({});
  });
  var resetErrors = (0, _useEventCallback.default)(function (formError) {
    if (formError === void 0) {
      formError = {};
    }
    setFormError(formError);
  });
  var cleanErrorForField = (0, _useEventCallback.default)(function (fieldName) {
    setFormError((0, _omit.default)(formError, [nestedField ? (0, _utils.nameToPath)(fieldName) : fieldName]));
  });
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      root: rootRef.current,
      check: check,
      checkForField: checkForField,
      checkAsync: checkAsync,
      checkForFieldAsync: checkForFieldAsync,
      cleanErrors: cleanErrors,
      cleanErrorForField: cleanErrorForField,
      resetErrors: resetErrors
    };
  });
  return rootRef;
}